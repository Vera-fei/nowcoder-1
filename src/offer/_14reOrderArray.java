package offer;
//@formatter:off
/**
 *                             _ooOoo_
 *                            o8888888o
 *                            88" . "88
 *                            (| -_- |)
 *                            O\  =  /O
 *                         ____/`---'\____
 *                       .'  \\|     |//  `.
 *                      /  \\|||  :  |||//  \
 *                     /  _||||| -:- |||||-  \
 *                     |   | \\\  -  /// |   |
 *                     | \_|  ''\---/''  |   |
 *                     \  .-\__  `-`  ___/-. /
 *                   ___`. .'  /--.--\  `. . __
 *                ."" '<  `.___\_<|>_/___.'  >'"".
 *               | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 *               \  \ `-.   \_ __\ /__ _/   .-` /  /
 *          ======`-.____`-.___\_____/___.-`____.-'======
 *                             `=---='
 *          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 *                     佛祖保佑        永无BUG
 *
 * 描述：输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。
 */
 //@formatter:on
public class _14reOrderArray {
    //用空间换时间,时间复杂度为o(n)
    public void reOrderArray(int[] array) {
        int length = array.length;
        int[] array_new = new int[length];
        int j = 0;//新数组的下标
        //将奇数存入新数组
        for (int i = 0; i < length; i++) {
            if ((array[i] & 1) == 1) {//奇数
                array_new[j] = array[i];
                j++;
            }
        }
        //将偶数放入新数组（奇数后面）
        for (int i = 0; i < length; i++) {
            if ((array[i] & 1) == 0) {//奇数
                array_new[j] = array[i];
                j++;
            }
        }
        for (int i = 0; i < length; i++) {
            array[i] = array_new[i];
        }
    }

    //若不能另辟空间，则可以使用冒泡的思想，从后往前移动，此时空间复杂度较高O(n^2)
}
